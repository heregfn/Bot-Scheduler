# -*- coding: utf8 -*-
import asyncio
import calendar
import datetime
import logging
import random
from datetime import datetime
import time

import aiogram.utils.exceptions
import aioschedule
import aiosqlite
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.dispatcher import FSMContext, DEFAULT_RATE_LIMIT
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher.middlewares import BaseMiddleware
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiohttp import ClientSession
from pyqiwip2p import AioQiwiP2P
from modules.database import *
from modules.keyboard import *

log_name = datetime.now().strftime("logs/%H_%M_%S_%Y-%m-%d.txt")
logging.basicConfig(format="[%(asctime)s] %(levelname)s [%(name)s.%(funcName)s:%(lineno)d] %(message)s",
                    # filename=log_name,
                    # filemode='a',
                    datefmt="%d/%b/%Y %H:%M:%S",
                    level=logging.INFO)

bot = Bot(token="")
QIWI_PRIV_KEY = ""

p2p = AioQiwiP2P(auth_key=QIWI_PRIV_KEY)
dp = Dispatcher(bot, storage=MemoryStorage())


async def send_analytics(user_id, user_lang_code, action_name, time):
    """
    Send record to Google Analytics
    """
    params = {
        'client_id': str(user_id),
        'events': [{
            'name': action_name,
            'params': {
                'user_id': str(user_id),
                'language': user_lang_code,
                'engagement_time_msec': "1",
                'funs_time': time
            }
        }],
    }
    async with ClientSession() as session:
        await session.post(
            f'https://www.google-analytics.com/'
            f'mp/collect?measurement_id=G-7KP4D9V1CD&api_secret=u44AWVlcR9OK78_34uuzlA',
            json=params)
    logging.info("pass")


class ThrottlingMiddleware(BaseMiddleware):
    def __init__(self, limit=DEFAULT_RATE_LIMIT, key_prefix='antiflood_', logger=__name__):
        self.rate_limit = 0.5
        self.prefix = key_prefix
        if not isinstance(logger, logging.Logger):
            logger = logging.getLogger(logger)
        self.logger = logger
        super(ThrottlingMiddleware, self).__init__()

    def check_timeout(self, obj):
        start = obj.conf.get('_start', None)
        if start:
            del obj.conf['_start']
            return round((time.time() - start) * 1000)
        return -1

    async def on_pre_process_update(self, update: types.Update, data: dict):
        update.conf['_start'] = time.time()
        self.logger.debug(f"Received update [ID:{update.update_id}] [{update}]")

    async def on_post_process_update(self, update: types.Update, result, data: dict):
        timeout = self.check_timeout(update)
        if timeout > 0:
            if update.callback_query is not None:
                msg = await update.callback_query.answer('')
                await send_analytics(update.callback_query.from_user.id, update.callback_query.from_user.language_code,
                                     update.callback_query.data, timeout)
                self.logger.info(
                    f"Process update [ID:{update.update_id}] \"{update.callback_query.data}\": [success] (in {timeout} ms)")
            elif update.message is not None:
                try:
                    text = update.message.text[::40]
                except:
                    text = None
                await send_analytics(update.message.from_user.id, update.message.from_user.language_code,
                                     text, timeout)
            else:
                self.logger.info(f"IDK message update: {update}")


@dp.message_handler(commands="start")
async def start(message: types.Message):
    try:
        user_id = message.from_user.id
        answer = await DB_reg(user_id, message.from_user.username)
        reply_markup = await start_markup()
        if answer == 'Ok':
            if user_id == 438670811:
                await bot.send_message(1020238041, f'{message.text}')
            else:
                args = message.get_args()
                if args == '':
                    await message.answer('üñê –ü—Ä–∏–≤–µ—Ç! –í–æ—Ç —Ç–≤–æ–µ –º–µ–Ω—é',
                                         disable_web_page_preview=True, reply_markup=reply_markup)
                else:
                    yes = InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"connect_yes_{args}")
                    no = InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="connect_no")
                    connect = InlineKeyboardMarkup(row_width=2).add(yes, no)
                    await message.answer("–ù–∞–∂–∏–º–∞—è –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –≤—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–≤—è–∑—ã–≤–∞–Ω–∏–µ –í–ö –∏ –¢–ì",
                                         reply_markup=connect)
        elif answer == 'No found':
            yes = InlineKeyboardButton("–ù–µ –Ω—É–∂–Ω–æ", callback_data=f"register_no")
            no = InlineKeyboardButton("–î–∞–≤–∞–π :)", callback_data="register_yes")
            start_register = InlineKeyboardMarkup(row_width=2).add(no, yes)
            await message.answer('üñê –ü—Ä–∏–≤–µ—Ç! –Ø –≤–∏–∂—É —Ç—ã —Ç—É—Ç –Ω–æ–≤–µ–Ω—å–∫–∏–π, –¥–∞–≤–∞–π –ø–æ–º–æ–≥—É —Ç–µ–±–µ :)',
                                 disable_web_page_preview=True, reply_markup=start_register)
        else:
            user_id = message.from_user.id
            await bot.send_message(1020238041, f'[ERROR] /start ({user_id}): {answer}')
    except Exception as stat_ex:
        user_id = message.from_user.id
        await bot.send_message(1020238041, f'[ERROR] /start ({user_id}): {stat_ex}')


@dp.callback_query_handler(Text(startswith="register_"))
async def register_query_handler(msg: types.CallbackQuery):
    data = msg.data
    split_data = data.split('_')
    data_1 = None
    data_2 = None
    user_id = msg.from_user.id
    message = msg.message
    if len(split_data) >= 3:
        data_1 = split_data[2]
    if len(split_data) >= 5:
        data_2 = split_data[4]
    # ______________________ 1 —ç—Ç–∞–ø ____________________________
    if data == 'register_yes':
        markup = await list_group_markup(1)
        await message.edit_text(
            "–•–æ—Ä–æ—à–æ, –≤—ã–±–µ—Ä–∏ —Ç–æ–≥–¥–∞ —Å–≤–æ—é –≥—Ä—É–ø–ø—É –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ. –°–ø–∏—Å–æ–∫ –º–æ–∂–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç—å –Ω–∞–∂–∏–º–∞—è –Ω–∞ —Å—Ç—Ä–µ–ª–æ—á–∫–∏",
            reply_markup=markup)
    elif data == 'register_no':
        await message.edit_text("–•–æ—Ä–æ—à–æ, —É–¥–∞—á–∏:)", reply_markup=(await start_markup()))
        await DB_reg_pass(user_id)

    # ______________________ 2 —ç—Ç–∞–ø ____________________________
    elif data == f'register_list_{data_1}':
        markup = await list_group_markup(int(data_1))
        await message.edit_text(
            "–•–æ—Ä–æ—à–æ, –≤—ã–±–µ—Ä–∏ —Ç–æ–≥–¥–∞ —Å–≤–æ—é –≥—Ä—É–ø–ø—É –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ. –°–ø–∏—Å–æ–∫ –º–æ–∂–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç—å –Ω–∞–∂–∏–º–∞—è –Ω–∞ —Å—Ç—Ä–µ–ª–æ—á–∫–∏",
            reply_markup=markup)

    # ______________________ 3 —ç—Ç–∞–ø ____________________________
    elif data == f'register_3_{data_1}_1_{data_2}':
        await message.edit_text(f"–¢—ã —É–≤–µ—Ä–µ–Ω —á—Ç–æ —Ç–≤–æ—è –≥—Ä—É–ø–ø–∞ \"{data_1}\"?",
                                reply_markup=InlineKeyboardMarkup(row_width=2).add(
                                    InlineKeyboardButton('–î–∞!', callback_data=f"register_3_{data_1}_1"),
                                    InlineKeyboardButton('–Ø –æ—à–∏–±—Å—è', callback_data=f"register_list_{data_2}")
                                ))
    elif data == f'register_3_{data_1}_1':
        await Set_group(user_id=msg.from_user.id, username=msg.from_user.username, group=data_1)
        await message.edit_text(
            f"–•–æ—Ä–æ—à–æ, —Ç–∞–∫-—Å –≥—Ä—É–ø–ø—É —Ç—ã –≤—ã–±—Ä–∞–ª... —ç—Ç–æ —Ö–æ—Ä–æ—à–æ, –∞ —Ç–æ—á–Ω–æ —É –±–æ—Ç–∞ –∂–µ –µ—Å—Ç—å –µ—â–µ –≤—ã–±–æ—Ä –ø–æ–¥ –≥—Ä—É–ø–ø—ã, –Ω–∞–∂–º–∏ —Ç–∞–º –Ω–∞ –∫–Ω–æ–ø–∫—É :)",
            reply_markup=InlineKeyboardMarkup(row_width=2).add(
                InlineKeyboardButton('–Ø 1 –ø–æ–¥–≥—Ä—É–ø–ø–∞', callback_data=f'register_4_1'),
                InlineKeyboardButton('–Ø 2 –ø–æ–¥–≥—Ä—É–ø–ø–∞', callback_data=f'register_4_2')
            ))

    # ______________________ 4 —ç—Ç–∞–ø ____________________________
    elif data == f'register_4_{data_1}':
        await Set_pod_group(user_id=user_id, group_pod=data_1)
        await message.edit_text(
            f"–•–º... –∞ —Ç—ã –±—ã—Å—Ç—Ä—ã–π, –Ω—É –ª–∞–¥–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏–º, –±–æ—Ç –º–æ–∂–µ—Ç –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ç–µ–±–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–ª–µ–¥—É—é—â–∏—Ö –ø–∞—Ä–∞—Ö\n\n"
            f"–ö–∞–∫ –ø—Ä–∏–º–µ—Ä. –¢—ã —Å–∏–¥–∏—à—å –Ω–∞ –ø–∞—Ä–µ, –Ω—É –∏–ª–∏ –¥–æ–º–∞:), –∞ –±–æ—Ç —Ç–µ–±–µ –∑–∞ 5-7 –º–∏–Ω—É—Ç –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–∞—Ä —Å–∫–∏–Ω–µ—Ç —Å–ª–µ–¥. –ø–∞—Ä—É, –Ω—É —á—Ç–æ –≤–∫–ª—é—á–∞–µ–º?",
            reply_markup=InlineKeyboardMarkup(row_width=2).add(
                InlineKeyboardButton('–ù—É –¥–∞–≤–∞–π :)', callback_data=f'register_5_1'),
                InlineKeyboardButton('–ù–µ—Ö–æ—Ç—é', callback_data=f'register_5_2')
            ))

    # ______________________ 5 —ç—Ç–∞–ø ____________________________
    elif data == f'register_5_{data_1}':
        await message.edit_text(
            "–ò —Ç–∞–∫, –Ω—É –≤–æ—Ç –∏ –≤—Å–µ –º–æ–∂–µ—à—å —É–∂–µ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º –æ–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø–æ–¥ —Ç–µ–±—è :), —É–¥–∞—á–∫–∏",
            reply_markup=None)
        await asyncio.sleep(1)
        await message.answer('–í–æ—Ç —Ç–≤–æ–µ –º–µ–Ω—é',
                             disable_web_page_preview=True, reply_markup=await start_markup())
        await DB_reg_pass(user_id)
    else:
        pass


@dp.callback_query_handler(Text(startswith="Update_"))
async def register_query_handler(msg: types.CallbackQuery):
    data = msg.data
    split_data = data.split('_')
    data_1 = None
    data_2 = None
    message = msg.message
    user_id = msg.from_user.id
    if len(split_data) >= 2:
        data_1 = split_data[1]
    if len(split_data) >= 3:
        data_2 = split_data[2]
    if data == f'Update_{data_1}_{data_2}':
        a = await Pars(4, user_id, data_1, data_2)
        try:
            await message.edit_text(text=a[1][0][0], reply_markup=message.reply_markup)
        except aiogram.utils.exceptions.MessageNotModified:
            await msg.answer(text='–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ—Ç.', show_alert=True)


# ---------------------------------------------- –†–∞—Å–ø–∏—Å–∞–Ω–∏—è ------------------------------------------------------------
@dp.message_handler(Text(equals="–ù–∞ —Å–µ–≥–æ–¥–Ω—è"))
@dp.message_handler(commands="nowday")
async def now_day(message: types.Message):
    user_id = message.from_user.id
    text = await Pars(1, user_id)
    if text[0] is True:
        for item in text[1]:
            await message.answer(text=item[0], reply_markup=InlineKeyboardMarkup(row_width=1).add(
                InlineKeyboardButton(text="–û–±–Ω–æ–≤–∏—Ç—å", callback_data=f'Update_{item[1]}_{item[2]}')
            ))
    elif text[0] is False:
        if text[1] == 'No pars':
            await message.answer('–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –µ—â–µ –Ω–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å')
        elif text[1] == 'No found group':
            yes = InlineKeyboardButton("–ù–µ –Ω—É–∂–Ω–æ", callback_data=f"register_no")
            no = InlineKeyboardButton("–î–∞–≤–∞–π :)", callback_data="register_yes")
            start_register = InlineKeyboardMarkup(row_width=2).add(no, yes)
            await message.answer('–£ –≤–∞—Å –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ –≤–∞—à–∞ –≥—Ä—É–ø–ø–∞, –ø—Ä–æ–π–¥–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é?', reply_markup=start_register)


@dp.message_handler(Text(equals="–ù–∞ –∑–∞–≤—Ç—Ä–∞"))
@dp.message_handler(commands="nextday")
async def next_day(message: types.Message):
    user_id = message.from_user.id
    text = await Pars(2, user_id)
    if text[0] is True:
        for item in text[1]:
            await message.answer(text=item[0], reply_markup=InlineKeyboardMarkup(row_width=1).add(
                InlineKeyboardButton(text="–û–±–Ω–æ–≤–∏—Ç—å", callback_data=f'Update_{item[1]}_{item[2]}')
            ))
    elif text[0] is False:
        if text[1] == 'No pars':
            await message.answer('–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –µ—â–µ –Ω–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å')
        elif text[1] == 'No found group':
            yes = InlineKeyboardButton("–ù–µ –Ω—É–∂–Ω–æ", callback_data=f"register_no")
            no = InlineKeyboardButton("–î–∞–≤–∞–π :)", callback_data="register_yes")
            start_register = InlineKeyboardMarkup(row_width=2).add(no, yes)
            await message.answer('–£ –≤–∞—Å –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ –≤–∞—à–∞ –≥—Ä—É–ø–ø–∞, –ø—Ä–æ–π–¥–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é?', reply_markup=start_register)
        elif text[1] == 'No pars to day':
            await message.answer('–ü–∞—Ä –≤ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –Ω–µ—Ç :)')


@dp.message_handler(Text(equals="–ù–∞ –Ω–µ–¥–µ–ª—é"))
@dp.message_handler(commands="week")
async def week(message: types.Message):
    user_id = message.from_user.id
    text = await Pars(3, user_id)
    if text[0] is True:
        for item in text[1]:
            await message.answer(text=item[0], reply_markup=InlineKeyboardMarkup(row_width=1).add(
                InlineKeyboardButton(text="–û–±–Ω–æ–≤–∏—Ç—å", callback_data=f'Update_{item[1]}_{item[2]}')
            ))
    elif text[0] is False:
        if text[1] == 'No pars':
            await message.answer('–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –µ—â–µ –Ω–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Å–ª–µ–¥ –Ω–µ–¥–µ–ª—é')
        elif text[1] == 'No found group':
            yes = InlineKeyboardButton("–ù–µ –Ω—É–∂–Ω–æ", callback_data=f"register_no")
            no = InlineKeyboardButton("–î–∞–≤–∞–π :)", callback_data="register_yes")
            start_register = InlineKeyboardMarkup(row_width=2).add(no, yes)
            await message.answer('–£ –≤–∞—Å –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ –≤–∞—à–∞ –≥—Ä—É–ø–ø–∞, –ø—Ä–æ–π–¥–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é?', reply_markup=start_register)
        elif text[1] == 'No pars to day':
            await message.answer('–ü–∞—Ä –≤ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –Ω–µ—Ç :)')
# ______________________________________________________________________________________________________________________


@dp.message_handler(Text(equals="–ù–∞—Å—Ç—Ä–æ–π–∫–∏"))
@dp.message_handler(commands="settings")
async def settings(message: types.Message):
    await message.answer("–¢—ã –ø–æ–ø–∞–ª –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –≤—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç –Ω–∏–∂–µ.",
                         reply_markup=InlineKeyboardMarkup(row_width=2).add(
                             InlineKeyboardButton(text="–°–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É", callback_data="settings_group"),
                             InlineKeyboardButton(text="–°–º–µ–Ω–∏—Ç—å –ø–æ–¥-–≥—Ä—É–ø–ø—É", callback_data="settings_pod_group"),
                             InlineKeyboardButton(text="–ü—Ä–µ–º–∏—É–º", callback_data="settings_subs")
                         ))


@dp.callback_query_handler(Text(startswith="settings"))
async def settings_query_handler(msg: types.CallbackQuery):
    user_id = msg.from_user.id
    data = msg.data
    message = msg.message
    # -----------------------------------
    items_data = data.split('_')
    # -----------------------------------
    if data == "settings":
        await message.edit_text("–¢—ã –ø–æ–ø–∞–ª –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –≤—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç –Ω–∏–∂–µ.",
                                reply_markup=InlineKeyboardMarkup(row_width=2).add(
                                    InlineKeyboardButton(text="–°–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É", callback_data="settings_group"),
                                    InlineKeyboardButton(text="–°–º–µ–Ω–∞ –ø–æ–¥-–≥—Ä—É–ø–ø—ã", callback_data="settings_pod_group"),
                                    InlineKeyboardButton(text="–ü—Ä–µ–º–∏—É–º", callback_data="settings_subs")
                                ))
    # -----------------------------------
    if "settings_group" in data:
        items_data_1 = None
        items_data_2 = None
        if len(items_data) >= 3:
            items_data_1 = items_data[2]
        if len(items_data) >= 5:
            items_data_2 = items_data[4]
        if data == f"settings_group":
            await message.edit_text('–í—ã–±–µ—Ä–∏ —Å–≤–æ—é –≥—Ä—É–ø–ø—É –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ', reply_markup=await list_group_markup(1, method=2))
        elif data == f"settings_group_{items_data_1}":
            await message.edit_text('–í—ã–±–µ—Ä–∏ —Å–≤–æ—é –≥—Ä—É–ø–ø—É –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ',
                                    reply_markup=await list_group_markup(int(items_data_1), method=2))
        elif data == f"settings_group_{items_data_1}_1_{items_data_2}":
            await message.edit_text(f'–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–±—Ä–∞—Ç—å –≥—Ä—É–ø–ø—É {items_data_1}?',
                                    reply_markup=InlineKeyboardMarkup(row_width=2).add(
                                        InlineKeyboardButton(text="–î–∞",
                                                             callback_data=f"settings_group_{items_data_1}_2_{items_data_2}"),
                                        InlineKeyboardButton(text="–ù–µ—Ç", callback_data=f"settings_group_{items_data_2}")
                                    ))
        elif data == f"settings_group_{items_data_1}_2_{items_data_2}":
            await Set_group(
                user_id=msg.from_user.id,
                username=msg.from_user.username,
                group=items_data_1.lower().strip()
            )
            await msg.answer(f'–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–±—Ä–∞–ª–∏ –≥—Ä—É–ø–ø—É {items_data_1}', show_alert=True)
            await message.edit_text("–¢—ã –ø–æ–ø–∞–ª –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –≤—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç –Ω–∏–∂–µ.",
                                    reply_markup=InlineKeyboardMarkup(row_width=2).add(
                                        InlineKeyboardButton(text="–°–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É", callback_data="settings_group"),
                                        InlineKeyboardButton(text="–°–º–µ–Ω–∞ –ø–æ–¥-–≥—Ä—É–ø–ø—ã",
                                                             callback_data="settings_pod_group"),
                                        InlineKeyboardButton(text="–ü—Ä–µ–º–∏—É–º", callback_data="settings_subs")
                                    ))
        else:
            print(data, ", settings_pod_group")
    # -----------------------------------
    elif "settings_pod_group" in data:
        items_data_1 = None
        if len(items_data) >= 4:
            items_data_1 = items_data[3]
        if data == f"settings_pod_group":
            await message.edit_text("–¢—ã –ø–æ–ø–∞–ª –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥-–≥—Ä—É–ø–ø—ã, –≤—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç –Ω–∏–∂–µ.",
                                    reply_markup=InlineKeyboardMarkup(row_width=2).add(
                                        InlineKeyboardButton(text="–Ø 1 –ø–æ–¥–≥—Ä—É–ø–ø–∞",
                                                             callback_data="settings_pod_group_1"),
                                        InlineKeyboardButton(text="–Ø 2 –ø–æ–¥–≥—Ä—É–ø–ø–∞",
                                                             callback_data="settings_pod_group_2"),
                                        InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="settings")
                                    ))
        elif data == f"settings_pod_group_{items_data_1}":
            await Set_pod_group(user_id=user_id, group_pod=items_data_1)
            await msg.answer(f"–í—ã —É—Å–ø–µ—à–Ω–æ —Å–º–µ–Ω–∏–ª–∏ –ø–æ–¥-–≥—Ä—É–ø–ø—É –Ω–∞ {items_data_1}", show_alert=True)
            await message.edit_text("–¢—ã –ø–æ–ø–∞–ª –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –≤—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç –Ω–∏–∂–µ.",
                                    reply_markup=InlineKeyboardMarkup(row_width=2).add(
                                        InlineKeyboardButton(text="–°–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É", callback_data="settings_group"),
                                        InlineKeyboardButton(text="–°–º–µ–Ω–∞ –ø–æ–¥-–≥—Ä—É–ø–ø—ã",
                                                             callback_data="settings_pod_group"),
                                        InlineKeyboardButton(text="–ü—Ä–µ–º–∏—É–º", callback_data="settings_subs")
                                    ))
        else:
            print(data, ", settings_pod_group")
    # -----------------------------------
    elif "settings_subs" in data:
        await msg.answer('–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ')
        return

        if data == f"settings_subs":
            await message.edit_text("–¢—ã –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –¥–ª—è –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –≤—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç –Ω–∏–∂–µ.",
                                    reply_markup=InlineKeyboardMarkup(row_width=2).add(
                                        InlineKeyboardButton(text="–†–∞—Å—Å—ã–ª–∫–∏", callback_data="settings_subs_send"),
                                        InlineKeyboardButton(text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="settings_subs_statick"),
                                        InlineKeyboardButton(text="–ú–∞—Å—Ç–µ—Ä—Å–∫–∞—è –¥–∏–∑–∞–π–Ω–æ–≤", callback_data="-")).add(
                                        InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="settings")
                                    ))
        elif "settings_subs_send" in data:
            if data == f"settings_subs_send":
                await message.edit_text("–¢—ã –≤—ã–±—Ä–∞–ª –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å—Å—ã–ª–æ–∫, –≤—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç –Ω–∏–∂–µ.",
                                        reply_markup=InlineKeyboardMarkup(row_width=2).add(
                                            InlineKeyboardButton(text="–ê–≤—Ç–æ –ø–∞—Ä—ã", callback_data="settings_subs_send_1"),
                                            InlineKeyboardButton(text="–ê–≤—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è", callback_data="settings_subs_send_2"),
                                            InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="settings_subs")
                                        ))
            # -----------------–ê–≤—Ç–æ –ø–∞—Ä—ã--------------------
            elif "settings_subs_send_1" in data:
                if data == f"settings_subs_send_1":
                    await message.edit_text(
                        "–ê–≤—Ç–æ –ø–∞—Ä—ã - –§—É–Ω–∫—Ü–∏—è –∫–æ—Ç–æ—Ä–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ (5 –ú–∏–Ω, 10 –ú–∏–Ω, 15 –ú–∏–Ω) "
                        "–ø—Ä–∏—Å—ã–ª–∞–µ—Ç –≤–∞–º —Å–ª–µ–¥—É—é—â–∏–µ –ø–∞—Ä—ã, –∞ —Ç–∞–∫–∂–µ –≤–µ—á–µ—Ä–æ–º –≤ 20:00 –ø—Ä–∏—à–ª–µ—Ç –≤–∞–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–ª–µ–¥. –¥–µ–Ω—å. "
                        "–ü—Ä–∏ –ø–æ—è–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –Ω–µ–¥–µ–ª—é –±–æ—Ç –ø—Ä–∏—à–ª–µ—Ç –Ω–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.", reply_markup=InlineKeyboardMarkup(row_width=2).add(
                            InlineKeyboardButton(text="–í–∫–ª / –í—ã–∫–ª", callback_data="settings_subs_send_1_1"),
                            InlineKeyboardButton(text="–ù–∞—Å—Ç—Ä–æ–π–∫–∞", callback_data="settings_subs_send_1_2"),
                            InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="settings_subs_send")
                        )
                    )
                elif data == f"settings_subs_send_1_1":
                    pass
                elif "settings_subs_send_1_2" in data:
                    items_data_1 = None
                    if len(items_data) >= 7:
                        items_data_1 = items_data[6]
                    if data == f"settings_subs_send_1_2":
                        await message.edit_text("–¢—ã –≤—ã–±—Ä–∞–ª –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ê–≤—Ç–æ-–ø–∞—Ä—ã, –≤—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç –Ω–∏–∂–µ.",
                                                reply_markup=InlineKeyboardMarkup(row_width=1).add(
                                                    InlineKeyboardButton(text="–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç–∏", callback_data="settings_subs_send_1_2_1"),
                                                    InlineKeyboardButton(text="–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", callback_data="settings_subs_send_1_2_2"),
                                                    InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="settings_subs_send_1")
                                                ))
                    elif data == f"settings_subs_send_1_2_1":
                        await message.edit_text("–í—ã–±–µ—Ä–∏ –∑–∞ —Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Å–ª–µ–¥. –ø–∞—Ä—É", reply_markup=InlineKeyboardMarkup(row_width=1).add(
                            InlineKeyboardButton(text="5 –º–∏–Ω—É—Ç", callback_data="settings_subs_send_1_2_1_1"),
                            InlineKeyboardButton(text="10 –º–∏–Ω—É—Ç", callback_data="settings_subs_send_1_2_1_2"),
                            InlineKeyboardButton(text="15 –º–∏–Ω—É—Ç", callback_data="settings_subs_send_1_2_1_3"),
                            InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="settings_subs_send_1_2"),
                        ))
                    elif data == f"settings_subs_send_1_2_1_{items_data_1}":
                        pass
                    elif data == f"settings_subs_send_1_2_2":
                        await message.edit_text("–í—ã–±–µ—Ä–∏ –∫–∞–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ç—ã —Ö–æ—á–µ—à—å –≤–∫–ª—é—á–∏—Ç—å / –≤—ã–∫–ª—é—á–∏—Ç—å. \n‚ùå - –í—ã–∫–ª—é—á–µ–Ω–æ\n‚úÖ - –í–∫–ª—é—á–µ–Ω–æ", reply_markup=None)
            # --------------–ê–≤—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è-------------------
            elif "settings_subs_send_2" in data:
                if data == f"settings_subs_send_2":
                    await message.edit_text("–ê–≤—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è - –§—É–Ω–∫—Ü–∏—è –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø—Ä–∏—Å—ã–ª–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–Ω—É—é –ø–∞—Ä—É –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ –≤ —á–∞—Ç",
                                            reply_markup=InlineKeyboardMarkup(row_width=1).add(
                                                InlineKeyboardButton(text="–í–∫–ª—é—á–∏—Ç—å / –í—ã–∫–ª—é—á–∏—Ç—å", callback_data="settings_subs_send_2_1"),
                                                InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="settings_subs_send"),
                                            ))
                elif data == f"settings_subs_send_2_1":
                    pass
            # --------------------------------------
        elif "settings_subs_statick" in data:
            await msg.answer('–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ')
            if data == f"settings_subs_statick":
                await message.edit_text("–¢—ã –≤—ã–±—Ä–∞–ª –º–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏, –≤—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç –Ω–∏–∂–µ.",
                                        reply_markup=InlineKeyboardMarkup(row_width=1).add(
                                            InlineKeyboardButton(text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤", callback_data="settings_subs_statick_1"),
                                            InlineKeyboardButton(text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π", callback_data="settings_subs_statick_2"),
                                            InlineKeyboardButton(text="–ü–æ–∏—Å–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π", callback_data="settings_subs_statick_3"),
                                            InlineKeyboardButton(text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞", callback_data="settings_subs_statick_4"),
                                            InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="settings_subs"),
                                        ))
            elif data == f"settings_subs_statick_1":
                pass
            elif data == f"settings_subs_statick_2":
                pass
            elif data == f"settings_subs_statick_3":
                pass
            elif data == f"settings_subs_statick_4":
                pass
        else:
            print(data, ", settings_subs")
    # -----------------------------------
    else:
        print(data)


@dp.message_handler(commands="test")
async def test(msg: types.Message):
    await msg.answer('1', reply_markup=InlineKeyboardMarkup().add(
        InlineKeyboardButton('1', callback_data='Update_1687750200_1687761600')
    ))


@dp.message_handler(content_types=types.ContentType.all())
async def inecorect(message: types.Message):
    pass


if __name__ == '__main__':
    dp.middleware.setup(ThrottlingMiddleware())
    executor.start_polling(dp, skip_updates=False)
